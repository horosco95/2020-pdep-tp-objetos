import mensajeros.*
describe "Test de mensajeros y destinos - 1ra entrega"{
	test "El paquete esta pagado y un mensajero que viaja en camion con ningun o un acoplado sí puede llegar a destino" {
	paquete.pagado()
	roberto.viajaEn(camion)
	camion.agregarAcoplado()
	assert.equals(1, camion.numAcoplados())
	paquete.asignarDestino(puenteDeBrooklyn)
	assert.that(paquete.puedeSerEntregadoPor(roberto))
	}
	test "El paquete esta pagado y un mensajero que viaja en camion con dos o más acoplados no puede llegar a destino" {
	paquete.pagado()
	roberto.viajaEn(camion)
	camion.agregarAcoplado()
	camion.agregarAcoplado()
	paquete.asignarDestino(puenteDeBrooklyn)
	assert.notThat(paquete.puedeSerEntregadoPor(roberto))
	}
	test "Un mensajero con crédito y el paquete no esta pago no puede viajar a un destino" {
	neo.agregarCredito(2)
	assert.that(neo.puedeLlamar())
	assert.notThat(paquete.estaPago())
	paquete.asignarDestino(laMatrix)
	assert.notThat(paquete.puedeSerEntregadoPor(neo))
	}
	test "Un mensajero con paquete pago y con transporte no puede llegar a destino" {
	paquete.pagado()
	roberto.viajaEn(bici)
	paquete.asignarDestino(laMatrix)
	assert.notThat(paquete.puedeSerEntregadoPor(roberto))
	}
	test "Un destino permite ingresar a un mensajero que pesa menos de 1000 kilos" {
	assert.that(puenteDeBrooklyn.dejaPasarA(chuckNorris))
	}
	test "Un destino no permite ingresar a un mensajero que pesa mas de 1000 kilos" {
	roberto.viajaEn(camion)
	camion.agregarAcoplado()
	camion.agregarAcoplado()
	assert.notThat(puenteDeBrooklyn.dejaPasarA(roberto))
	}
}
// Test para 2da entrega del TP.
describe "Test de mensajería y paquetes - 2da entrega"{
	test "Example"{
		assert.that(true)
	}
}