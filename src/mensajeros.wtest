import mensajeros.*
describe "Test de mensajeros y destinos - 1ra entrega"{
	test "El paquete esta pagado y un mensajero que viaja en camion con ningun o un acoplado sí puede llegar a destino" {
	paquete.pagado()
	roberto.viajaEn(camion)
	camion.agregarAcoplado()
	assert.equals(1, camion.numAcoplados())
	paquete.asignarDestino(puenteDeBrooklyn)
	assert.that(paquete.puedeSerEntregadoPor(roberto))
	}
	test "El paquete esta pagado y un mensajero que viaja en camion con dos o más acoplados no puede llegar a destino" {
	paquete.pagado()
	roberto.viajaEn(camion)
	camion.agregarAcoplado()
	camion.agregarAcoplado()
	paquete.asignarDestino(puenteDeBrooklyn)
	assert.notThat(paquete.puedeSerEntregadoPor(roberto))
	}
	test "Un mensajero con crédito y el paquete no esta pago no puede viajar a un destino" {
	neo.agregarCredito(2)
	assert.that(neo.puedeLlamar())
	assert.notThat(paquete.estaPago())
	paquete.asignarDestino(laMatrix)
	assert.notThat(paquete.puedeSerEntregadoPor(neo))
	}
	test "Un mensajero con paquete pago y con transporte no puede llegar a destino" {
	paquete.pagado()
	roberto.viajaEn(bici)
	paquete.asignarDestino(laMatrix)
	assert.notThat(paquete.puedeSerEntregadoPor(roberto))
	}
	test "Un destino permite ingresar a un mensajero que pesa menos de 1000 kilos" {
	assert.that(puenteDeBrooklyn.dejaPasarA(chuckNorris))
	}
	test "Un destino no permite ingresar a un mensajero que pesa mas de 1000 kilos" {
	roberto.viajaEn(camion)
	camion.agregarAcoplado()
	camion.agregarAcoplado()
	assert.notThat(puenteDeBrooklyn.dejaPasarA(roberto))
	}
}
// Test para 2da entrega del TP.
describe "Test de mensajería y paquetes - 2da entrega"{
	test "Un mensajero es contratado por empresa de mensajería efectivamente"{
		mensajeria.contratar(neo)
		assert.that( mensajeria.mensajeros().contains(neo) )
	}
	test "Un mensajero que pertenece a una empresa de mensajeria puede ser despedido"{
		mensajeria.contratar(neo)
		mensajeria.contratar(roberto)
		mensajeria.contratar(chuckNorris)
		mensajeria.despedir(roberto)
		assert.notThat( mensajeria.mensajeros().contains(roberto) )
	}
	test "Una empresa de mensajeria despide a todos los mensajeros efectivamente"{
		mensajeria.contratar(neo)
		mensajeria.contratar(chuckNorris)
		mensajeria.despedirTodos()
		assert.that( mensajeria.mensajeros().isEmpty() )
	}
	test "Una empresa de mensajería que tiene 2 o menos mensajeros no es grande"{
		mensajeria.contratar(neo)
		mensajeria.contratar(chuckNorris)
		assert.notThat( mensajeria.esMensajeriaGrande() )
	}
	test "El primer empleado de la empresa puede entregar un paquete pagado"{
		mensajeria.contratar(neo)
		paquete.pagado()
		paquete.asignarDestino(puenteDeBrooklyn)
		assert.that( mensajeria.puedeEntregarElPrimero(paquete) )
	}
	test "Conocer el peso del último empleado de la empresa de mensajería"{
		mensajeria.contratar(neo)
		mensajeria.contratar(chuckNorris)
		assert.equals(900, mensajeria.pesoUltimoMensajero() )
	}	
	test "La empresa sabe que uno de sus empleados puede entregar un paquete pagado"{
		mensajeria.contratar(neo)
		mensajeria.contratar(chuckNorris)
		assert.that( mensajeria.algunoPuedeEntregar(paquetito) )	
	}
	test "Devuelve una lista de empleados que pueden entregar un paquete pagado"{
		paqueton.destinos(laMatrix)
		paqueton.destinos(puenteDeBrooklyn)
		paqueton.pagar(200)
		mensajeria.contratar(neo)
		mensajeria.contratar(roberto)
		mensajeria.contratar(chuckNorris)
		assert.notThat( mensajeria.mensajerosQuePuedenLlevar(paqueton).isEmpty() )
	}
	
}